/**
 * AN
 * CLIENT JS IMPLEMENTATION OF OSCARTOKI
 * 
 * Implementation of OscarToki emitting-receiving
 * this script will emit a request to the Python Microservice
 * With the generated oscartoki
 * And will get a response, 
 * Verify the oscartoki generated by the microservice to authentify the "response"
 * And Proceed before ends.
 * 
 * By Sanix-darker
 */

// // >> First: import the Oscartoki JS class
// // ---------------------------------------------------------
const Oscartokiclass = require('../../clients/javascript (for ReactJs)/Oscartoki/index');
const axios = require("axios");



// // Let's declare or BETTER take from a onfig file theese information:
Example_clientkey = "aess3212-kj321gyu-gsad76-dsa687-21y873";
Microservice_Url = "http://127.0.0.1:1234";

// Set the debug Mode to true or false [OPTIONAL], default, debugmode is false.
let Oscartoki = new Oscartokiclass(true);

/** 
 * *****************************************************************************
 * EXAMPLE:
 * FOR THE GENERATION OF THE TOKI TO ADD IN HEADER OFF EACH REQUESTS.
 * IN THE PARAMETER: "oscartoki"
 * *****************************************************************************
 * */
// It's important to read this variable fomr a config file and not to 
// put it hard in the code like this[FOR SECURITY], it's just a quick example 
Example_clientkey = "aess3212-kj321gyu-gsad76-dsa687-21y873";
// set the clientkey to Oscartoki
Oscartoki.setClientkey(Example_clientkey);
// Generate the Toki
Oscartoki.generateToki();

// Get Toki generated
Oscartoki.tokiPrint("Toki: '" + Oscartoki.getToki() +"'");


const peerURL = Microservice_Url
Oscartoki.setPeerURL(peerURL);
// oscar_result[0] is the status of the process if it have won it's true
// if not it's false
const checkkToki = Oscartoki.checkToki();
// And oscar_result[1] will be the key if the proces  won or the error message if the process failed
checkkToki.then((oscar_result) => {
    Oscartoki.tokiPrint("Stating tokiCheck...")
    console.log("oscar_result: ", oscar_result);
    if(oscar_result[0] === true){

        ///////////////////////////////////////////////////////////////////////
        //////--------------------------------------------------------------///
        ////// DO YOUR STUFF HERE CUZ THE TOKI AND IT's KEY ARE BOTH VALIDS  //
        //////--------------------------------------------------------------///
        ///////////////////////////////////////////////////////////////////////

        // Now you have the Key (toki and you can request with that now by adding it in headers)
        // oscartokikey: value
        const oscartokikey = oscar_result[1];
        Oscartoki.tokiPrint("oscartokikey: "+ oscartokikey)
        axios({
            method: 'get',
            url: peerURL+"?a=1&b=3", 
            headers: {
                'oscartoki': Oscartoki.getToki(),
                'oscartokikey': oscartokikey,
            }
        }).then(response => {
            console.log(">>response.data: ", response.data);


        }).catch(error => {

            Oscartoki.tokiPrint("error: "+ error);

        });

    }else{
        // Let's print the error
        Oscartoki.tokiPrint("Error: "+oscar_result[1])
    }

});

// // We import the xmlhttprequest
// var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;



// // We declare the method that will make the http request
// const httpGetWithOscarToki = (url, oscartoki) => {
    
//     var xmlHttp = new XMLHttpRequest();
//     xmlHttp.open( "GET", url, false );
//     xmlHttp.setRequestHeader("oscartoki",oscartoki);
//     xmlHttp.send(null);
//     return xmlHttp;
// }

// // Let's set the debugmode to true
// let Oscartoki = new Oscartokiclass(true);
// // set the clientkey to Oscartoki
// Oscartoki.setClientkey(Example_clientkey);
// // Generate the Toki
// Oscartoki.generateToki();
// // Get Toki generated
// console.log("Toki: '" + Oscartoki.getToki()+"'");


// // >> Second: Emit the Rest Request to the Microservice with the Oscartoki in the header
// // ---------------------------------------------------------
// // We want to get the sum of an a and b.
// const a = 1;
// const b = 1;
// console.log("Emitting a request to the microservice to proceed!");
// const request_url = Microservice_Url+"?a="+a.toString()+"&b="+b.toString();

// // >> Third: Receive the response
// // ---------------------------------------------------------
// const responseHttp = httpGetWithOscarToki(request_url, Oscartoki.getToki());
// console.log("A response have been sent by the Microservice.")

// // Extract the toki generated by the microservice.
// const toki_getted = responseHttp.getResponseHeader("oscartoki");
// console.log("Oscar-Toki extracted sended by the microservice: ", toki_getted);

// // >> Fourth: Verify the oscartoki content in the header
// // ---------------------------------------------------------
// // If the Toki is valid
// if (Oscartoki.verifyToki(toki_getted) === true){

// // >> Fith: Proceed and ends the running
// // ---------------------------------------------------------
//     console.log("This is a Valid Toki!");
//     console.log("Response: ", responseHttp.responseText)
//     console.log("Result sent by the microservice on " + a + " + " + b + " =", JSON.parse(responseHttp.responseText)["message"])

// }else{ // the toki is not valid

//     console.log("Oops! This Toki is not valid!");
// }