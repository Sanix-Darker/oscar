/**
 * AN
 * CLIENT JS IMPLEMENTATION OF OSCARTOKI
 * 
 * Implementation of OscarToki emitting-receiving
 * this script will emit a request to the Python Microservice
 * With the generated oscartoki
 * And will get a response, 
 * Verify the oscartoki generated by the microservice to authentify the "response"
 * And Proceed before ends.
 * 
 * By Sanix-darker
 */

// We import the xmlhttprequest
var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

// Let's declare or BETTER take from a onfig file theese information:
Example_clientkey = "aess3212-kj321gyu-gsad76-dsa687-21y873";
Microservice_Url = "http://127.0.0.1:1234";

// We declare the method that will make the http request
const httpGetWithOscarToki = (url, oscartoki) => {
    
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", url, false );
    xmlHttp.setRequestHeader("oscartoki",oscartoki);
    xmlHttp.send(null);
    return xmlHttp;
}

// >> First: import the Oscartoki JS class
// ---------------------------------------------------------
const Oscartokiclass = require('../../clients/javascript (for ReactJs)/Oscartoki/index');

// Let's set the debugmode to true
let Oscartoki = new Oscartokiclass(true);
// set the clientkey to Oscartoki
Oscartoki.setClientkey(Example_clientkey);
// Generate the Toki
Oscartoki.generateToki();
// Get Toki generated
console.log("Toki: '" + Oscartoki.getToki()+"'");


// >> Second: Emit the Rest Request to the Microservice with the Oscartoki in the header
// ---------------------------------------------------------
// We want to get the sum of an a and b.
const a = 1;
const b = 1;
console.log("Emitting a request to the microservice to proceed!");
const request_url = Microservice_Url+"?a="+a.toString()+"&b="+b.toString();

// >> Third: Receive the response
// ---------------------------------------------------------
const responseHttp = httpGetWithOscarToki(request_url, Oscartoki.getToki());
console.log("A response have been sent by the Microservice.")

// Extract the toki generated by the microservice.
const toki_getted = responseHttp.getResponseHeader("oscartoki");
console.log("Oscar-Toki extracted sended by the microservice: ", toki_getted);

// >> Fourth: Verify the oscartoki content in the header
// ---------------------------------------------------------
// If the Toki is valid
if (Oscartoki.verifyToki(toki_getted) === true){

// >> Fith: Proceed and ends the running
// ---------------------------------------------------------
    console.log("This is a Valid Toki!");
    console.log("Response: ", responseHttp.responseText)
    console.log("Result sent by the microservice on " + a + " + " + b + " =", JSON.parse(responseHttp.responseText)["message"])

}else{ // the toki is not valid

    console.log("Oops! This Toki is not valid!");
}